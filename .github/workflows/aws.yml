name: Deploy Application Docker Image to EC2 instance - Run CI/CD

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names hf || aws ecr create-repository --repository-name hf
          echo "ECR repository 'hf' is ready"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: hf
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2.pem
          chmod 600 ~/.ssh/ec2.pem
          echo "SSH key configured"

      - name: Deploy to EC2 via SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e

          # Configure AWS CLI
          export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
          export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
          export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"

          # Login to ECR
          aws ecr get-login-password | docker login --username AWS --password-stdin ${ECR_REGISTRY}

          # Stop and remove existing container
          echo "Stopping any existing container..."
          docker stop ml-model-app 2>/dev/null || true
          echo "Removing any existing container..."
          docker rm ml-model-app 2>/dev/null || true

          # Make sure the container is really gone
          if docker ps -a | grep -q ml-model-app; then
            echo "Container still exists, forcing removal..."
            docker rm -f ml-model-app 2>/dev/null || true
          fi

          # Pull latest image
          echo "Pulling latest image..."
          docker pull ${ECR_REGISTRY}/hf:latest

          # Run new container
          echo "Starting new container..."
          docker run -d --name ml-model-app \
            -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
            -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
            -e AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}" \
            -e MONGODB_URL="${MONGODB_URL}" \
            -p 8080:8080 \
            ${ECR_REGISTRY}/hf:latest

          echo "Container started successfully."
          EOL

          # Copy script to EC2 and execute
          chmod +x deploy.sh
          scp -i ~/.ssh/ec2.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            deploy.sh ${EC2_USERNAME}@${EC2_HOST}:~/deploy.sh

          ssh -i ~/.ssh/ec2.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            ${EC2_USERNAME}@${EC2_HOST} \
            "AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}' \
             AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
             AWS_DEFAULT_REGION='${{ secrets.AWS_DEFAULT_REGION }}' \
             MONGODB_URL='${{ secrets.MONGODB_URL }}' \
             ECR_REGISTRY='${ECR_REGISTRY}' \
             bash ~/deploy.sh"